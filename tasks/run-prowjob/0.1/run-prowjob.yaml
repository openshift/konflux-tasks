apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: run-prowjob
spec:
  description: >-
    Run a parameterized prowjob using gangway.
  params:
  - name: SNAPSHOT
    description: 'Snapshot of the application'
  - name: GANGWAY_TOKEN
    type: string
    default: gangway-token
    description: 'Token to authenticate with gangway'

  # Test parameters
  - name: CLOUD_PROVIDER
    type: string
    default: aws
    description: 'Cloud provider to use for the test (one of aws, gcp, azure)'
  - name: OPENSHIFT_VERSION
    type: string
    default: '4.18'
    description: 'OpenShift version to test against; must be in the format 4.x; if you are using a stable, fast or candidate channel, you can specify 4.x.y'
  - name: CHANNEL_STREAM
    type: string
    default: 'stable'
    description: 'OpenShift stream/channel to test against; one of stable, fast, candidate, 4-stable, nightly, konflux-nightly, ci;
     stable, fast and candidate are channels from the Cincinnati server, the other ones are streams from the release controller; always the latest version of the stream/channel will be used'
  - name: ARCHITECTURE
    type: string
    default: 'amd64'
    description: 'Architecture to test against; one of amd64, arm64'

  # Artifacts image parameters
  - name: ARTIFACTS_BUILD_ROOT
    type: string
    description: 'Image to use for building the artifacts image, e.g. quay-proxy.ci.openshift.org/openshift/ci:ocp_builder_rhel-9-golang-1.22-openshift-4.17'
  - name: DOCKERFILE_ADDITIONS
    type: string
    description: 'Dockerfile additions to use for building the artifacts image, e.g. RUN make build'
  - name: DEPLOY_TEST_COMMAND
    type: string
    description: 'Command that deploys and tests the OPERATOR_IMAGE on the cluster, e.g. make deploy && make test'
  
  # Special parameters
  - name: BUNDLE_PRE_TEST_COMMAND
    type: string
    default: ''
    description: 'Only use with bundle image test! Pre-test command to run before the test, e.g. oc apply ...'
  - name: BUNDLE_NS
    type: string
    default: ''
    description: 'Namespace to use if installing bundle image'
  - name: PULL_SECRET
    type: string
    default: ''
    description: 'Secret created by the user in https://vault.ci.openshift.org/ in the test-credential namespace with the field .dockerconfigjson; necessary for private images'
  - name: ENVS
    type: string
    default: ''
    description: 'Optional environment variables to inject into the test; separated by commas; e.g. VAR1=val1,VAR2=val2'
  results:
  - name: PROWJOB_ID
    description: The triggered prowjob id
  - name: PROWJOB_URL
    description: The prowjob url to spyglass
  - name: PROWJOB_STATUS
    description: The status of the prowjob
  steps:
  - name: run-prowjob
    image: registry.access.redhat.com/ubi9/ubi:latest
    env:
    - name: GANGWAY_TOKEN
      valueFrom:
        secretKeyRef:
          name: $(params.GANGWAY_TOKEN)
          key: token
    - name: CLOUD_PROVIDER
      value: $(params.CLOUD_PROVIDER)
    - name: DEPLOY_TEST_COMMAND
      value: $(params.DEPLOY_TEST_COMMAND)
    - name: OPENSHIFT_VERSION
      value: $(params.OPENSHIFT_VERSION)
    - name: CHANNEL_STREAM
      value: $(params.CHANNEL_STREAM)
    - name: ARCHITECTURE
      value: $(params.ARCHITECTURE)
    - name: SNAPSHOT
      value: $(params.SNAPSHOT)
    - name: ORG
      valueFrom:
        fieldRef:
          fieldPath: metadata.labels['pac.test.appstudio.openshift.io/url-org']
    - name: REPO
      valueFrom:
        fieldRef:
          fieldPath: metadata.labels['pac.test.appstudio.openshift.io/url-repository']
    - name: COMMIT
      valueFrom:
        fieldRef:
          fieldPath: metadata.labels['pac.test.appstudio.openshift.io/sha']
    - name: COMPONENT_NAME
      valueFrom:
        fieldRef:
          fieldPath: metadata.labels['appstudio.openshift.io/component']
    - name: ARTIFACTS_BUILD_ROOT
      value: $(params.ARTIFACTS_BUILD_ROOT)
    - name: DOCKERFILE_ADDITIONS
      value: $(params.DOCKERFILE_ADDITIONS)
    - name: BUNDLE_PRE_TEST_COMMAND
      value: $(params.BUNDLE_PRE_TEST_COMMAND)
    - name: BUNDLE_NS
      value: $(params.BUNDLE_NS)
    - name: PULL_SECRET
      value: $(params.PULL_SECRET)
    - name: ENVS
      value: $(params.ENVS)
    script: |
      #!/usr/bin/env bash

      # Getting tooling
      dnf install wget jq -y --quiet > /dev/null
      VERSION=v4.45.1
      BINARY=yq_linux_amd64
      wget https://github.com/mikefarah/yq/releases/download/${VERSION}/${BINARY} --quiet -O /usr/bin/yq &&\
      chmod +x /usr/bin/yq

      # Artifacts Dockerfile
      DOCKERFILE_LITERAL=$(cat <<EOF
      FROM ${ARTIFACTS_BUILD_ROOT}
      COPY --from=quay-proxy.ci.openshift.org/openshift/ci:ocp_4.18_cli /bin/oc /bin/oc
      COPY --from=quay-proxy.ci.openshift.org/openshift/ci:ocp_4.18_cli /bin/kubectl /bin/kubectl
      RUN umask 0002
      WORKDIR /workspace
      RUN curl -L -o repo.zip "https://github.com/${ORG}/${REPO}/archive/${COMMIT}.zip" && unzip repo.zip
      WORKDIR /workspace/${REPO}-${COMMIT}
      ${DOCKERFILE_ADDITIONS}
      RUN find /workspace -type d -not -perm -0777 | xargs --max-procs 10 --max-args 100 --no-run-if-empty chmod 777
      RUN find /workspace -type f -not -perm -0777 | xargs --max-procs 10 --max-args 100 --no-run-if-empty chmod 777
      RUN find /go -type d -not -perm -0777 | xargs --max-procs 10 --max-args 100 --no-run-if-empty chmod 777
      RUN find /go -type f -not -perm -0777 | xargs --max-procs 10 --max-args 100 --no-run-if-empty chmod 777
      EOF
      )
      export DOCKERFILE_LITERAL

      # Modifiying ci-op config
      curl -s https://raw.githubusercontent.com/openshift/release/refs/heads/master/ci-operator/config/openshift/konflux-tasks/openshift-konflux-tasks-main.yaml > config.yaml
      yq -i 'del(.build_root.project_image)' config.yaml
      yq -i 'del(.tests[].steps.test[].cli)' config.yaml
      yq -i '(.build_root.project_image += {"dockerfile_literal": strenv(DOCKERFILE_LITERAL) })' config.yaml

      # Konflux Image
      KONFLUX_IMAGE=$(jq -r --arg component_name "${COMPONENT_NAME}" '.components[] | select(.name == $component_name) | .containerImage' <<< "${SNAPSHOT}")
      TAG=$(echo "$KONFLUX_IMAGE" | cut -d':' -f2)
      RNN=$(echo "$KONFLUX_IMAGE" | cut -d':' -f1)
      NAME=$(echo "$RNN" | rev | cut -d'/' -f1 | rev)
      NAMESPACE=$(echo "$RNN" | rev | cut -d'/' -f2 | rev)
      REGISTRY=$(echo "$RNN" | rev | cut -d'/' -f3- | rev)
      yq -i '(.external_images.konflux.registry = "'${REGISTRY}'")' config.yaml
      yq -i '(.external_images.konflux.namespace = "'${NAMESPACE}'")' config.yaml
      yq -i '(.external_images.konflux.name = "'${NAME}'")' config.yaml
      yq -i '(.external_images.konflux.tag = "'${TAG}'")' config.yaml
      if [[ -n "$PULL_SECRET" ]]; then
        yq -i '(.external_images.konflux.pull_secret = "'${PULL_SECRET}'")' config.yaml
      fi

      # Release
      if [[ $CHANNEL_STREAM == "stable" || $CHANNEL_STREAM == "fast" || $CHANNEL_STREAM == "candidate" ]]; then
        yq -i '(.releases.latest.release.channel = "'${CHANNEL_STREAM}'")' config.yaml
        yq -i '(.releases.latest.release.version = "'${OPENSHIFT_VERSION}'")' config.yaml
        yq -i '(.releases.latest.release.architecture = "amd64")' config.yaml
      elif [[ $CHANNEL_STREAM == "4-stable" ]]; then
        minor=$(echo "$OPENSHIFT_VERSION" | cut -d. -f2)
        minor_plus_one=$((minor + 1))
        yq -i '(.releases.latest.prerelease.product = "ocp" )' config.yaml
        yq -i '(.releases.latest.prerelease.architecture = "amd64")' config.yaml
        yq -i '(.releases.latest.prerelease.version_bounds.lower = "4.'${minor}'.0-0")' config.yaml
        yq -i '(.releases.latest.prerelease.version_bounds.upper = "4.'${minor_plus_one}'.0-0")' config.yaml
        yq -i '(.releases.latest.prerelease.version_bounds.stream = "'${CHANNEL_STREAM}'")' config.yaml
        yq -i 'del( .releases.latest.release)' config.yaml
      elif [[ $CHANNEL_STREAM == "nightly" || $CHANNEL_STREAM == "konflux-nightly" || $CHANNEL_STREAM == "ci" ]]; then
        yq -i '(.releases.latest.candidate.product = "ocp" )' config.yaml
        yq -i '(.releases.latest.candidate.architecture = "amd64")' config.yaml
        yq -i '(.releases.latest.candidate.stream = "'${CHANNEL_STREAM}'")' config.yaml
        yq -i '(.releases.latest.candidate.version = "'${OPENSHIFT_VERSION}'")' config.yaml
        yq -i 'del( .releases.latest.release)' config.yaml
      else
        echo "❌ Error: Invalid channel/stream specified. Use one of stable, fast, candidate, 4-stable, nightly, konflux-nightly, ci."
        exit 1
      fi

      # Placeholders modifications
      sed -i "s|operator-placeholder|pipeline:konflux|g" config.yaml
      sed -i "s|operator-placeholder|pipeline:konflux|g" config.yaml
      sed -i "s|command-placeholder|$DEPLOY_TEST_COMMAND|g" config.yaml

      # Arch specific modifications
      if [[ $ARCHITECTURE == "arm64" ]]; then
        yq -i '(.releases.latest.*.architecture = "multi")' config.yaml
        sed -i "s|amd64|arm64|g" config.yaml
      fi

      # ENV var modifications
      if [[ -n "$ENVS" ]]; then
        IFS=',' read -ra PAIRS <<< "$ENVS"
        for pair in "${PAIRS[@]}"; do
          KEY=$(echo "$pair" | cut -d'=' -f1)
          VALUE=$(echo "$pair" | cut -d'=' -f2-)
          yq -i '.tests[].steps.env."'"${KEY}"'" = "'"${VALUE}"'"' config.yaml
        done
      fi

      # Chosing prowjob
      if [[ $BUNDLE_NS != "" ]]; then
        PROWJOB_NAME="periodic-ci-openshift-konflux-tasks-main-konflux-test-bundle"
        sed -i "s|ns-placeholder|$BUNDLE_NS|g" config.yaml
        sed -i "s|optional-operators-ci-operator-sdk-aws|optional-operators-ci-operator-sdk-$CLOUD_PROVIDER|g" config.yaml
        cluster_profile=$(yq '( .tests[] | select(.as == "*'${CLOUD_PROVIDER}'*") |.steps.cluster_profile )' config.yaml)
        sed -i "s|cluster_profile: aws|cluster_profile: $cluster_profile|g" config.yaml
        yq -i 'del( .tests[] | select(.as != "*bundle*") )' config.yaml
        yq -i 'del(.tests[].steps.env.OO_INSTALL_MODE)' config.yaml
      elif [[ $CLOUD_PROVIDER == "gcp" ]]; then
        PROWJOB_NAME="periodic-ci-openshift-konflux-tasks-main-konflux-test-gcp"
        yq -i 'del( .tests[] | select(.as != "*gcp*") )' config.yaml
      elif [[ $CLOUD_PROVIDER == "azure" ]]; then
        PROWJOB_NAME="periodic-ci-openshift-konflux-tasks-main-konflux-test-azure"
        yq -i 'del( .tests[] | select(.as != "*azure*") )' config.yaml
      else
        PROWJOB_NAME="periodic-ci-openshift-konflux-tasks-main-konflux-test-aws"
        yq -i 'del( .tests[] | select(.as != "*aws*") )' config.yaml
      fi

      # Bundle pre-test command
      if [[ -n "$BUNDLE_PRE_TEST_COMMAND" ]]; then
        yq -i '.tests[0].steps.pre =  [ {"chain": "ipi-"+"'${CLOUD_PROVIDER}'"+"-pre"} ]' config.yaml
        yq -i '.tests[0].steps.pre += [ .tests[].steps.test[0] ]' config.yaml
        yq -i '.tests[0].steps.pre[1].as = "konflux-pre"' config.yaml
        yq -i '.tests[0].steps.pre[1].commands = env(BUNDLE_PRE_TEST_COMMAND)' config.yaml
        yq -i '.tests[0].steps.pre += [ {"ref": "optional-operators-operator-sdk"} ]' config.yaml
      fi

      # Querying config resolver to get the resolved config
      yq -o=json config.yaml > config.json
      MAX_RETRIES=3
      while true; do
        if curl -sSf -f -d @config.json https://config.ci.openshift.org/resolve > resolved.json; then
          break
        else
            sleep 10
        fi
        MAX_RETRIES=$((MAX_RETRIES - 1))
        if [ $MAX_RETRIES -le 0 ]; then
          echo "❌ Error: Config resolver is probably down."
          exit 1
        fi
      done

      # Specifying the gangway options
      GZIP_SPEC=$(gzip -c resolved.json | base64 -w0)
      payload=$(jq -n --arg job "$PROWJOB_NAME" --arg config "$GZIP_SPEC" \
        --arg org "$ORG" --arg repo "$REPO" \
        '{
          "job_name": $job,
          "job_execution_type": "1",
          "pod_spec_options": {
            "annotations": {
              "ci.openshift.io/konflux-repo" : ($org + "/" + $repo),
            },
            "envs": {
              "CONFIG_SPEC": $config,
            },
          }
        }')

      # Triggering PJ via gangway and getting ID/URL
      curl -s -X POST -H "Authorization: Bearer $GANGWAY_TOKEN" \
      -H "Content-Type: application/json" -d "$payload" \
      https://gangway-ci.apps.ci.l2s4.p1.openshiftapps.com/v1/executions >output.json
      PROWJOB_ID=$(jq -r '.id // empty' output.json)
      if [[ -z "$PROWJOB_ID" ]]; then
        echo "❌ Error: Failed to extract job ID from response."
        echo "👉 Probably expired gangway token."
        exit 1
      fi

      # Getting the prowjob spyglass URL
      while true; do
        sleep 10
        curl -s https://prow.ci.openshift.org/prowjob?prowjob=$PROWJOB_ID >pj.yaml
        PROWJOB_URL=$(yq eval '.status.url // ""' pj.yaml)
        if [[ -n "$PROWJOB_URL" ]]; then
          break
        fi
      done

      echo -n "${PROWJOB_ID}" | tee $(results.PROWJOB_ID.path)
      echo
      echo -n "🔗 "
      echo -n "${PROWJOB_URL}" | tee $(results.PROWJOB_URL.path)
  - name: report-prowjob-status
    image: registry.access.redhat.com/ubi9/ubi:latest
    env:
    - name: PROWJOB_ID_PATH
      value: $(results.PROWJOB_ID.path)
    - name: GANGWAY_TOKEN
      valueFrom:
        secretKeyRef:
          name: $(params.GANGWAY_TOKEN)
          key: token
    script: |
      #!/usr/bin/env bash
      dnf install jq -y --quiet > /dev/null
      PROWJOB_ID=$(cat $PROWJOB_ID_PATH)
      while true; do
        curl -s -H "Authorization: Bearer $GANGWAY_TOKEN" \
        https://gangway-ci.apps.ci.l2s4.p1.openshiftapps.com/v1/executions/$PROWJOB_ID >output.json
        if ! jq empty output.json 2>/dev/null; then
          sleep 30
          continue
        fi
        STATUS=$(cat output.json | jq '.job_status')
        if [ "$STATUS" == "\"SUCCESS"\" ]; then
          PROWJOB_STATUS="$STATUS"
          echo "✅ "
          echo -n "${PROWJOB_STATUS}" | tee $(results.PROWJOB_STATUS.path)
          exit 0
        fi
        if [ "$STATUS" == "\"FAILURE"\" ] || [ "$STATUS" == "\"ABORTED"\" ] || [ "$STATUS" == "\"ERROR"\" ]; then
          PROWJOB_STATUS="$STATUS"
          echo "❌ "
          echo -n "${PROWJOB_STATUS}" | tee $(results.PROWJOB_STATUS.path)
          exit 1
        fi
        sleep 30
      done
